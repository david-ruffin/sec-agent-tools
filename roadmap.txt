# GOAL: Create a simple, reliable SEC filing analyzer with Contextual Retrieval that directly uses SEC-API.io to fetch and analyze financial data

## Project Overview

This project aims to build a specialized SEC filing analyzer using SEC-API.io with Contextual Retrieval techniques. The system will maintain critical context when retrieving and analyzing SEC filings to provide more accurate and relevant responses to user queries about financial data, textual sections, and multi-filing comparisons.

## Architecture

The core architecture consists of:

1. **API Modules**: Specialized modules for each SEC-API endpoint:
   - `query_api/`: For searching and retrieving SEC filings metadata
   - `extractor_api/`: For extracting specific sections from filings
   - `edgar_entities_api/`: For accessing entity information
   - `mapping_api/`: For company name resolution
   - `full_text_search/`: For searching within filing content

2. **Knowledge Module** (`sec_api_knowledge.py`): Contains mappings and helper functions for SEC filing analysis

3. **Core Analyzer** (`sec_analyzer.py`): Basic implementation for processing user queries

4. **Enhanced Implementations**:
   - With chunking (`sec_analyzer_with_chunking.py`): For handling large document sections
   - With LangGraph (`sec_analyzer_langgraph.py`): For complex multi-step workflows

## Critical Issues

1. Currently, the XBRL-to-JSON API is not retrieving financial data correctly
2. The Extractor API is having issues with some filing URLs

## Tasks and Milestones

### Phase 1: Knowledge Module Enhancement (COMPLETED)

1. [DONE] Create comprehensive section ID mappings for 10-K, 10-Q, and 8-K filings
2. [DONE] Map financial metrics to XBRL field names
3. [DONE] Implement query intent detection (financial vs. textual)
4. [DONE] Add tool selection logic based on query type

### Phase 2: Agent Implementation (CURRENT)

1. [COMPLETED] Implement core SEC-API agents:
   - Filing Search Agent (QueryApi)
   - Full Text Search Agent (FullTextSearchApi)
   - Section Extraction Agent (ExtractorApi)
   - XBRL Converter Agent (XbrlApi)
   - Mapping Agent (MappingApi)
   - EDGAR Entities Agent (EdgarEntitiesApi)
   - Download Agent (RenderApi)
   - PDF Generator Agent (PdfGeneratorApi)

2. [IN PROGRESS] Implement remaining SEC-API agents (14 out of 33 completed):
   - Form ADV Firms Agent
   - Form ADV Individuals Agent
   - Form ADV Brochures Agent
   - Insider Trading Agent
   - 13F Holdings Agent
   - 13F Cover Pages Agent
   - 13D/G Ownership Agent
   - And more from the agents catalog in PLAN.md

3. [TODO] Create standardized tests for each agent:
   - Test valid parameters and successful responses
   - Test error handling for invalid parameters
   - Test rate limiting and authentication errors

### Phase 3: Context Preservation Implementation

1. [TODO] Enhance the agent framework to maintain context between steps:
   - Add context tracking to company resolution results
   - Store filing metadata in context when retrieving filings
   - Preserve section information when extracting content
   - Maintain financial data context for XBRL results

2. [TODO] Update core analyzer implementation:
   - Add context manager class to `sec_analyzer.py`
   - Implement contextual enrichment for financial data
   - Add metadata preservation for textual sections
   - Create helper functions for context tracking

### Phase 4: Agent Orchestration with LangGraph

1. [TODO] Develop LangGraph workflow for orchestrating agents:
   - Implement smart planner node
   - Create agent nodes for each SEC-API endpoint
   - Define state schema for tracking agent interactions
   - Set up conditional branching based on query type

2. [TODO] Implement end-to-end workflows:
   - Financial data extraction workflows
   - Textual section analysis workflows
   - Comparative analysis workflows
   - Change detection workflows

## Current Status

We have successfully implemented and thoroughly tested 8 critical SEC-API agents:

1. **Filing Search Agent**: Searches for SEC filings with full query language support
2. **Full Text Search Agent**: Performs content-based searches within filings
3. **Section Extraction Agent**: Extracts specific sections from 10-K, 10-Q, and 8-K filings
4. **XBRL Converter Agent**: Converts XBRL data to structured JSON for financial analysis
5. **Mapping Agent**: Resolves company identifiers (name, ticker, CIK) and lists companies
6. **EDGAR Entities Agent**: Retrieves company information from the EDGAR database
7. **Download Agent**: Downloads SEC filings in HTML format
8. **PDF Generator Agent**: Generates PDF versions of SEC filings

All agents follow a consistent pattern with:
- Standardized input validation
- Uniform error handling
- Rate limit management
- Clear response formatting
- Comprehensive test coverage

Each agent has its own plan file (`*_agent_plan.md`) that documents its capabilities, methods, parameters, and response formats in detail, making them easy to understand and extend.

## Next Steps

1. **Complete Agent Implementation** (Priority)
   - Continue implementing the remaining SEC-API agents
   - Focus on high-value agents like Form 13F, Insider Trading, and Executive Compensation
   - Maintain consistent structure across all implementations
   - Ensure thorough test coverage for each agent

2. **Create Agent Orchestration Framework**
   - Develop a planner agent that can determine which tools to use
   - Implement LangGraph for state management and workflow orchestration
   - Create a context preservation mechanism that maintains information between steps
   - Build example workflows for common use cases

3. **Implement Advanced Query Capabilities**
   - Multi-filing comparison
   - Financial data extraction and analysis
   - Trend detection across multiple quarters
   - SEC filing change analysis

Dependencies:
- SEC-API.io account and valid API key
- Python packages: sec-api, python-dotenv, langgraph

Testing Criteria:
1. API Connection
   - Successfully connects to SEC-API
   - Returns valid response format
   - Handles authentication errors

2. Data Retrieval
   - Correctly fetches company filings
   - Returns proper dates
   - Extracts financial metrics accurately

3. Error Handling
   - Handles missing data gracefully
   - Reports API errors clearly
   - Validates input parameters

DO NOT:
- Over-engineer with unnecessary abstractions
- Add features not directly related to SEC filing analysis
- Use LLMs for data that can be directly fetched from SEC-API

The test_sec_api.py exists for basic API testing 